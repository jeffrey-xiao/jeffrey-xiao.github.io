{"version":3,"sources":["webpack:///./src/components/projectCard.js","webpack:///./src/pages/projects.js"],"names":["ProjectWrapper","styled","div","colors","accent1","shade1","ProjectImage","img","ProjectImageLink","a","ProjectTitle","h1","base1","ProjectDescription","p","base2","ProjectCard","props","href","url","src","__PATH_PREFIX__","title","dangerouslySetInnerHTML","__html","description","ProjectsBody","ProjectCardWrapper","ProjectCards","ProjectsPage","componentDidMount","this","node","style","opacity","window","requestAnimationFrame","transition","render","projectCards","data","allProjectsJson","edges","forEach","project","push","key","ref","Helmet","React","Component","pageQuery"],"mappings":"yOAMMA,EAAiBC,IAAOC,IAAV,iFAAGD,CAAH,wLAGIE,IAAOC,QAAQ,IAEfD,IAAOE,SAECF,IAAOE,UAIjCC,EAAeL,IAAOM,IAAV,+EAAGN,CAAH,2IAUZO,EAAmBP,IAAOQ,EAAV,mFAAGR,CAAH,sLASAE,IAAOE,UAIvBK,EAAeT,IAAOU,GAAV,+EAAGV,CAAH,0HAMPE,IAAOS,SAGZC,EAAqBZ,IAAOa,EAAV,qFAAGb,CAAH,gDAGbE,IAAOY,SAoBHC,EAjBK,SAACC,GAAD,OAClB,kBAACjB,EAAD,KACE,kBAACQ,EAAD,CAAkBU,KAAMD,EAAME,KAC5B,kBAACb,EAAD,CAAcc,IAAKC,GAAkBJ,EAAMG,OAE7C,kBAACV,EAAD,KAAeO,EAAMK,OACrB,kBAACT,EAAD,CAAoBU,wBAAyB,CAAEC,OAAQP,EAAMQ,iBCpDjE,IAAMC,EAAezB,IAAOC,IAAV,4EAAGD,CAAH,qEAELE,IAAOC,WAMduB,EAAqB1B,IAAOC,IAAV,kFAAGD,CAAH,0KAelB2B,EAAe3B,IAAOC,IAAV,4EAAGD,CAAH,iDAMZ4B,E,kMACJC,kBAAA,WAAqB,IAAD,OAClBC,KAAKC,KAAKC,MAAMC,QAAU,EAC1BC,OAAOC,uBAAsB,WAC3B,EAAKJ,KAAKC,MAAMI,WAAa,0BAC7B,EAAKL,KAAKC,MAAMC,QAAU,M,EAI9BI,OAAA,WAAU,IAAD,OACDC,EAAe,GAerB,OAbAR,KAAKd,MAAMuB,KAAKC,gBAAgBC,MAAMC,SAAQ,SAACC,GAC7CL,EAAaM,KACX,kBAAClB,EAAD,CAAoBmB,IAAKF,EAAQZ,KAAKV,OACpC,kBAAC,EAAD,CACEA,MAAOsB,EAAQZ,KAAKV,MACpBG,YAAamB,EAAQZ,KAAKP,YAC1BL,IAAKwB,EAAQZ,KAAKZ,IAClBD,IAAKyB,EAAQZ,KAAKb,WAOxB,kBAACO,EAAD,CACEqB,IAAK,SAACf,GACJ,EAAKA,KAAOA,IAGd,kBAACgB,EAAA,OAAD,KACE,2DAEF,kBAACpB,EAAD,KAAeW,K,GAlCIU,IAAMC,WA0DpBC,GADEtB,YACO","file":"component---src-pages-projects-js-ecead3df6ded62351610.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport colors from \"../utils/colors\";\n\nconst ProjectWrapper = styled.div`\n  box-sizing: border-box;\n  &:hover .emphasis {\n    background-color: ${colors.accent1(0.1)};\n  }\n  border: 0.1px solid ${colors.shade1()};\n  border-radius: 7px;\n  box-shadow: inset 0 0 0 1px ${colors.shade1()}, 0 5px 15px -5px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n`;\n\nconst ProjectImage = styled.img`\n  position: absolute;\n  margin-left: 50%;\n  transform: translateX(-50%);\n  transition: transform 0.5s;\n  height: 100%;\n  max-width: 100%;\n  object-fit: contain;\n`;\n\nconst ProjectImageLink = styled.a`\n  &:hover > img {\n    transform: translateX(-50%) scale(1.1);\n  }\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  padding-bottom: 75%;\n  overflow: hidden;\n  border: 2px solid ${colors.shade1()};\n  border-radius: 7px;\n`;\n\nconst ProjectTitle = styled.h1`\n  text-transform: uppercase;\n  text-align: center;\n  font-family: \"Josefin Sans\", sans-serif;\n  font-size: 20px;\n  margin: 5px;\n  color: ${colors.base1()};\n`;\n\nconst ProjectDescription = styled.p`\n  margin-top: 7px;\n  text-align: center;\n  color: ${colors.base2()};\n`;\n\nconst ProjectCard = (props) => (\n  <ProjectWrapper>\n    <ProjectImageLink href={props.url}>\n      <ProjectImage src={__PATH_PREFIX__ + props.src} />\n    </ProjectImageLink>\n    <ProjectTitle>{props.title}</ProjectTitle>\n    <ProjectDescription dangerouslySetInnerHTML={{ __html: props.description }} />\n  </ProjectWrapper>\n);\n\nProjectCard.propTypes = {\n  url: PropTypes.string.isRequired,\n  src: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default ProjectCard;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\n\nimport ProjectCard from \"../components/projectCard\";\nimport colors from \"../utils/colors\";\n\nconst ProjectsBody = styled.div`\n  span.emphasis {\n    color: ${colors.accent1()};\n    transition: all 0.5s;\n  }\n  margin-bottom: 40px;\n`;\n\nconst ProjectCardWrapper = styled.div`\n  box-sizing: border-box;\n  padding: 20px;\n  width: 33.33%;\n  display: flex;\n\n  @media only screen and (max-width: 60em) {\n    width: 50%;\n  }\n\n  @media only screen and (max-width: 40em) {\n    width: 100%;\n  }\n`;\n\nconst ProjectCards = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -20px;\n`;\n\nclass ProjectsPage extends React.Component {\n  componentDidMount() {\n    this.node.style.opacity = 0;\n    window.requestAnimationFrame(() => {\n      this.node.style.transition = \"opacity 1000ms ease-out\";\n      this.node.style.opacity = 1;\n    });\n  }\n\n  render() {\n    const projectCards = [];\n\n    this.props.data.allProjectsJson.edges.forEach((project) => {\n      projectCards.push(\n        <ProjectCardWrapper key={project.node.title}>\n          <ProjectCard\n            title={project.node.title}\n            description={project.node.description}\n            src={project.node.src}\n            url={project.node.url}\n          />\n        </ProjectCardWrapper>,\n      );\n    });\n\n    return (\n      <ProjectsBody\n        ref={(node) => {\n          this.node = node;\n        }}\n      >\n        <Helmet>\n          <title>Projects - Jeffrey Xiao</title>\n        </Helmet>\n        <ProjectCards>{projectCards}</ProjectCards>\n      </ProjectsBody>\n    );\n  }\n}\n\nProjectsPage.propTypes = {\n  data: PropTypes.shape({\n    allProjectsJson: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n            description: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            src: PropTypes.string.isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ProjectsPage;\nexport const pageQuery = graphql`\n  {\n    allProjectsJson {\n      edges {\n        node {\n          url\n          description\n          title\n          src\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}